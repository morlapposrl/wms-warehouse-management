{"version":3,"file":"hooks.server-2aGkGsfZ.js","sources":["../../../.svelte-kit/adapter-node/chunks/hooks.server.js"],"sourcesContent":["import Database from \"better-sqlite3\";\nconst DB_PATH = \"./database/magazzino.db\";\nconst db = new Database(DB_PATH);\ndb.pragma(\"foreign_keys = ON\");\nfunction initializeDatabase() {\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS committenti (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      codice TEXT UNIQUE NOT NULL,\n      ragione_sociale TEXT NOT NULL,\n      partita_iva TEXT,\n      codice_fiscale TEXT,\n      indirizzo_sede TEXT,\n      indirizzo_fatturazione TEXT,\n      cap TEXT,\n      citta TEXT,\n      provincia TEXT,\n      telefono TEXT,\n      email TEXT,\n      pec TEXT,\n      referente_principale TEXT,\n      tipo_contratto TEXT CHECK(tipo_contratto IN ('deposito', 'logistica', 'misto')) DEFAULT 'deposito',\n      data_inizio_rapporto DATE,\n      data_fine_rapporto DATE,\n      stato TEXT CHECK(stato IN ('attivo', 'sospeso', 'cessato')) DEFAULT 'attivo',\n      note TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS utenti (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      email TEXT UNIQUE NOT NULL,\n      password_hash TEXT NOT NULL,\n      nome TEXT NOT NULL,\n      cognome TEXT NOT NULL,\n      ruolo TEXT CHECK(ruolo IN ('super_admin', 'admin_committente', 'operatore_magazzino', 'utente_committente', 'ospite')) NOT NULL,\n      committente_id INTEGER,\n      attivo INTEGER DEFAULT 1,\n      ultimo_accesso DATETIME,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (committente_id) REFERENCES committenti(id)\n    )\n  `);\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS categorie (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      committente_id INTEGER NOT NULL,\n      codice TEXT NOT NULL,\n      descrizione TEXT NOT NULL,\n      attiva INTEGER DEFAULT 1,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (committente_id) REFERENCES committenti(id),\n      UNIQUE(committente_id, codice)\n    )\n  `);\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS unita_misura (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      committente_id INTEGER,\n      codice TEXT NOT NULL,\n      descrizione TEXT NOT NULL,\n      tipo TEXT CHECK(tipo IN ('sistema', 'personalizzata')) DEFAULT 'personalizzata',\n      attiva INTEGER DEFAULT 1,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (committente_id) REFERENCES committenti(id)\n    )\n  `);\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS fornitori (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      codice TEXT NOT NULL,\n      ragione_sociale TEXT NOT NULL,\n      partita_iva TEXT,\n      codice_fiscale TEXT,\n      indirizzo TEXT,\n      cap TEXT,\n      citta TEXT,\n      provincia TEXT,\n      telefono TEXT,\n      email TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS committenti_fornitori (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      committente_id INTEGER NOT NULL,\n      fornitore_id INTEGER NOT NULL,\n      attivo INTEGER DEFAULT 1,\n      condizioni_specifiche TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (committente_id) REFERENCES committenti(id),\n      FOREIGN KEY (fornitore_id) REFERENCES fornitori(id),\n      UNIQUE(committente_id, fornitore_id)\n    )\n  `);\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS prodotti (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      committente_id INTEGER NOT NULL,\n      codice TEXT NOT NULL,\n      descrizione TEXT NOT NULL,\n      categoria_id INTEGER NOT NULL,\n      unita_misura_id INTEGER NOT NULL,\n      prezzo_acquisto REAL DEFAULT 0,\n      prezzo_vendita REAL DEFAULT 0,\n      scorta_minima INTEGER DEFAULT 0,\n      scorta_massima INTEGER DEFAULT 0,\n      ubicazione TEXT,\n      lotto_partita TEXT,\n      note TEXT,\n      attivo INTEGER DEFAULT 1,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (committente_id) REFERENCES committenti(id),\n      FOREIGN KEY (categoria_id) REFERENCES categorie(id),\n      FOREIGN KEY (unita_misura_id) REFERENCES unita_misura(id),\n      UNIQUE(committente_id, codice)\n    )\n  `);\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS movimenti (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      committente_id_origine INTEGER NOT NULL,\n      committente_id_destinazione INTEGER,\n      tipo_movimento TEXT NOT NULL CHECK(tipo_movimento IN (\n        'CARICO', 'SCARICO', 'TRASFERIMENTO_INTERNO', \n        'TRASFERIMENTO_INTER_COMMITTENTE', 'RETTIFICA_POS', \n        'RETTIFICA_NEG', 'RESO_CLIENTE', 'RESO_FORNITORE'\n      )),\n      prodotto_id INTEGER NOT NULL,\n      quantita INTEGER NOT NULL,\n      prezzo REAL DEFAULT 0,\n      fornitore_id INTEGER,\n      numero_documento TEXT,\n      data_documento DATE,\n      causale TEXT,\n      operatore TEXT,\n      note TEXT,\n      data_movimento DATETIME DEFAULT CURRENT_TIMESTAMP,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (committente_id_origine) REFERENCES committenti(id),\n      FOREIGN KEY (committente_id_destinazione) REFERENCES committenti(id),\n      FOREIGN KEY (prodotto_id) REFERENCES prodotti(id),\n      FOREIGN KEY (fornitore_id) REFERENCES fornitori(id)\n    )\n  `);\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS giacenze (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      committente_id INTEGER NOT NULL,\n      prodotto_id INTEGER NOT NULL,\n      quantita INTEGER DEFAULT 0,\n      valore_medio REAL DEFAULT 0,\n      ultima_modifica DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (committente_id) REFERENCES committenti(id),\n      FOREIGN KEY (prodotto_id) REFERENCES prodotti(id),\n      UNIQUE(committente_id, prodotto_id)\n    )\n  `);\n  db.exec(`\n    CREATE INDEX IF NOT EXISTS idx_categorie_committente ON categorie(committente_id);\n    CREATE INDEX IF NOT EXISTS idx_prodotti_committente ON prodotti(committente_id);\n    CREATE INDEX IF NOT EXISTS idx_movimenti_committente_origine ON movimenti(committente_id_origine);\n    CREATE INDEX IF NOT EXISTS idx_giacenze_committente ON giacenze(committente_id);\n    CREATE INDEX IF NOT EXISTS idx_utenti_committente ON utenti(committente_id);\n    CREATE INDEX IF NOT EXISTS idx_committenti_fornitori_committente ON committenti_fornitori(committente_id);\n  `);\n  const tables = [\"committenti\", \"utenti\", \"categorie\", \"unita_misura\", \"fornitori\", \"prodotti\", \"movimenti\"];\n  tables.forEach((table) => {\n    db.exec(`\n      CREATE TRIGGER IF NOT EXISTS update_${table}_timestamp \n      AFTER UPDATE ON ${table}\n      BEGIN\n        UPDATE ${table} SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;\n      END;\n    `);\n  });\n  db.exec(`\n    CREATE TRIGGER IF NOT EXISTS aggiorna_giacenza_dopo_movimento\n    AFTER INSERT ON movimenti\n    BEGIN\n      -- Inserisci o aggiorna giacenza per committente origine\n      INSERT INTO giacenze (committente_id, prodotto_id, quantita)\n      VALUES (NEW.committente_id_origine, NEW.prodotto_id, \n        CASE \n          WHEN NEW.tipo_movimento IN ('CARICO', 'RETTIFICA_POS', 'RESO_CLIENTE') THEN NEW.quantita\n          WHEN NEW.tipo_movimento IN ('SCARICO', 'RETTIFICA_NEG', 'RESO_FORNITORE', 'TRASFERIMENTO_INTERNO', 'TRASFERIMENTO_INTER_COMMITTENTE') THEN -NEW.quantita\n          ELSE 0\n        END\n      )\n      ON CONFLICT(committente_id, prodotto_id) DO UPDATE SET\n        quantita = quantita + \n          CASE \n            WHEN NEW.tipo_movimento IN ('CARICO', 'RETTIFICA_POS', 'RESO_CLIENTE') THEN NEW.quantita\n            WHEN NEW.tipo_movimento IN ('SCARICO', 'RETTIFICA_NEG', 'RESO_FORNITORE', 'TRASFERIMENTO_INTERNO', 'TRASFERIMENTO_INTER_COMMITTENTE') THEN -NEW.quantita\n            ELSE 0\n          END,\n        ultima_modifica = CURRENT_TIMESTAMP;\n        \n      -- Per trasferimenti inter-committente, aggiorna anche destinazione\n      INSERT INTO giacenze (committente_id, prodotto_id, quantita)\n      SELECT NEW.committente_id_destinazione, NEW.prodotto_id, NEW.quantita\n      WHERE NEW.tipo_movimento = 'TRASFERIMENTO_INTER_COMMITTENTE' \n        AND NEW.committente_id_destinazione IS NOT NULL\n      ON CONFLICT(committente_id, prodotto_id) DO UPDATE SET\n        quantita = quantita + NEW.quantita,\n        ultima_modifica = CURRENT_TIMESTAMP;\n    END;\n  `);\n  const count = db.prepare(\"SELECT COUNT(*) as count FROM committenti\").get();\n  if (count.count === 0) {\n    console.log(\"Inserimento dati di esempio...\");\n    db.exec(`\n      INSERT INTO committenti (codice, ragione_sociale, partita_iva, email, stato) VALUES\n      ('COMM001', 'Azienda Alpha S.r.l.', '12345678901', 'admin@alpha.it', 'attivo'),\n      ('COMM002', 'Beta Industries', '98765432109', 'contatti@beta.com', 'attivo'),\n      ('COMM003', 'Gamma Logistics', '11223344556', 'info@gamma.it', 'attivo');\n    `);\n    db.exec(`\n      INSERT INTO unita_misura (committente_id, codice, descrizione, tipo) VALUES\n      (NULL, 'PZ', 'Pezzo', 'sistema'),\n      (NULL, 'KG', 'Chilogrammo', 'sistema'),\n      (NULL, 'LT', 'Litro', 'sistema'),\n      (NULL, 'MT', 'Metro', 'sistema'),\n      (NULL, 'MQ', 'Metro Quadrato', 'sistema'),\n      (NULL, 'SCATOLA', 'Scatola', 'sistema'),\n      (NULL, 'PALLET', 'Pallet', 'sistema');\n    `);\n    db.exec(`\n      INSERT INTO utenti (email, password_hash, nome, cognome, ruolo, attivo) VALUES\n      ('admin@magazzino.it', '$2a$10$example.hash.here', 'Super', 'Admin', 'super_admin', 1);\n    `);\n    console.log(\"Database inizializzato con dati di esempio!\");\n  }\n}\ninitializeDatabase();\n"],"names":[],"mappings":";;AACA,MAAM,OAAO,GAAG,yBAAyB;AACzC,MAAM,EAAE,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC;AAChC,EAAE,CAAC,MAAM,CAAC,mBAAmB,CAAC;AAC9B,SAAS,kBAAkB,GAAG;AAC9B,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,MAAM,MAAM,GAAG,CAAC,aAAa,EAAE,QAAQ,EAAE,WAAW,EAAE,cAAc,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC;AAC7G,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK;AAC5B,IAAI,EAAE,CAAC,IAAI,CAAC;AACZ,0CAA0C,EAAE,KAAK,CAAC;AAClD,sBAAsB,EAAE,KAAK;AAC7B;AACA,eAAe,EAAE,KAAK,CAAC;AACvB;AACA,IAAI,CAAC,CAAC;AACN,EAAE,CAAC,CAAC;AACJ,EAAE,EAAE,CAAC,IAAI,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,MAAM,KAAK,GAAG,EAAE,CAAC,OAAO,CAAC,2CAA2C,CAAC,CAAC,GAAG,EAAE;AAC7E,EAAE,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,EAAE;AACzB,IAAI,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC;AACjD,IAAI,EAAE,CAAC,IAAI,CAAC;AACZ;AACA;AACA;AACA;AACA,IAAI,CAAC,CAAC;AACN,IAAI,EAAE,CAAC,IAAI,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,CAAC,CAAC;AACN,IAAI,EAAE,CAAC,IAAI,CAAC;AACZ;AACA;AACA,IAAI,CAAC,CAAC;AACN,IAAI,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC;AAC9D,EAAE;AACF;AACA,kBAAkB,EAAE"}